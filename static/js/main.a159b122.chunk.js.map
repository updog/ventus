{"version":3,"sources":["App.js","serviceWorker.js","index.js","placeholder.gif"],"names":["App","Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showModal","loading","error","setState","method","response","console","log","_this2","react_default","a","createElement","className","onClick","openModal","react_modal_login_default","visible","onCloseModal","closeModal","bind","tabs","afterChange","afterTabsChange","loginError","label","registerError","startLoading","finishLoading","form","onLogin","onRegister","onRecoverPassword","loginInputs","containerClass","type","inputClass","id","name","placeholder","registerInputs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6RAqKeA,SAhKMC,wBAyBnB,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,EACXC,SAAS,EACTC,MAAO,MALQV,2EAUjBG,KAAKQ,SAAS,CACZH,WAAW,yCAKbL,KAAKQ,SAAS,CACZH,WAAW,EACXE,MAAO,8CAIIE,EAAQC,GACrBC,QAAQC,IAAI,4BAA8BH,uCAGhCA,EAAQC,GAClBC,QAAQC,IAAI,uBAAyBH,GACrCT,KAAKQ,SAAS,CACZD,MAAOG,2CAKTV,KAAKQ,SAAS,CACZF,SAAS,4CAKXN,KAAKQ,SAAS,CACZF,SAAS,8CAKXN,KAAKQ,SAAS,CACZD,MAAO,wCAIF,IAAAM,EAAAb,KACP,OACEc,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,uFACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAEbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,QAAS,kBAAML,EAAKM,cAArD,UAEAL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,QAASrB,KAAKI,MAAMC,UACpBiB,aAActB,KAAKuB,WAAWC,KAAKxB,MACnCM,QAASN,KAAKI,MAAME,QACpBC,MAAOP,KAAKI,MAAMG,MAClBkB,KAAM,CACJC,YAAa1B,KAAK2B,gBAAgBH,KAAKxB,OAEzC4B,WAAY,CACVC,MAAO,uCAETC,cAAe,CACbD,MAAO,uCAETE,aAAc/B,KAAK+B,aAAaP,KAAKxB,MACrCgC,cAAehC,KAAKgC,cAAcR,KAAKxB,MACvCiC,KAAM,CACJC,QAAS,KACTC,WAAY,KACZC,kBAAmB,KACnBC,YAAa,CAAC,CACZC,eAAgB,MAChBC,KAAM,QACNC,WAAY,MACZC,GAAI,KACJC,KAAM,OACNC,YAAa,QACbd,MAAO,SACN,CACDS,eAAgB,MAChBC,KAAM,WACNC,WAAY,MACZC,GAAI,KACJC,KAAM,OACNC,YAAa,WACbd,MAAO,aAETe,eAAgB,CAAC,CACfN,eAAgB,MAChBC,KAAM,OACNC,WAAY,MACZC,GAAI,KACJC,KAAM,OACNC,YAAa,OACbd,MAAO,QACN,CACDS,eAAgB,MAChBC,KAAM,QACNC,WAAY,MACZC,GAAI,KACJC,KAAM,OACNC,YAAa,QACbd,MAAO,SACN,CACDS,eAAgB,MAChBC,KAAM,WACNC,WAAY,MACZC,GAAI,KACJC,KAAM,OACNC,YAAa,WACbd,MAAO,0BA1HPlC,cCjBEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a159b122.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactModalLogin from 'react-modal-login';\nimport placeholder from './placeholder.gif';\nimport './App.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={placeholder} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Welcome to Ventus! Currently under construction.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/updog/ventus\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            See our Github!\n          </a>\n          <div className=\"arrow\"></div>\n        </header>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n      loading: false,\n      error: null\n    };\n  };\n\n  openModal() {\n    this.setState({\n      showModal: true,\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      showModal: false,\n      error: null\n    });\n  }\n\n  onLoginSuccess(method, response) {\n    console.log('logged successfully with ' + method);\n  }\n\n  onLoginFail(method, response) {\n    console.log('logging failed with ' + method);\n    this.setState({\n      error: response\n    })\n  }\n\n  startLoading() {\n    this.setState({\n      loading: true\n    })\n  }\n\n  finishLoading() {\n    this.setState({\n      loading: false\n    })\n  }\n\n  afterTabsChange() {\n    this.setState({\n      error: null\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"splash\">\n          <h1>Ventus</h1>\n          <h2>A simple and effective chat application designed for university students.</h2>\n          <div className=\"login\">\n\n            <button className=\"login-button\" onClick={() => this.openModal()}>Log in</button>\n\n            <ReactModalLogin\n              visible={this.state.showModal}\n              onCloseModal={this.closeModal.bind(this)}\n              loading={this.state.loading}\n              error={this.state.error}\n              tabs={{\n                afterChange: this.afterTabsChange.bind(this)\n              }}\n              loginError={{\n                label: \"Couldn't sign in, please try again.\"\n              }}\n              registerError={{\n                label: \"Couldn't sign up, please try again.\"\n              }}\n              startLoading={this.startLoading.bind(this)}\n              finishLoading={this.finishLoading.bind(this)}\n              form={{\n                onLogin: null,\n                onRegister: null,\n                onRecoverPassword: null,\n                loginInputs: [{\n                  containerClass: \"log\",\n                  type: \"Email\",\n                  inputClass: \"inp\",\n                  id: \"id\",\n                  name: \"name\",\n                  placeholder: \"Email\",\n                  label: \"Email\"\n                }, {\n                  containerClass: \"log\",\n                  type: \"Password\",\n                  inputClass: \"inp\",\n                  id: \"id\",\n                  name: \"name\",\n                  placeholder: \"Password\",\n                  label: \"Password\"\n                }],\n                registerInputs: [{\n                  containerClass: \"log\",\n                  type: \"Name\",\n                  inputClass: \"inp\",\n                  id: \"id\",\n                  name: \"name\",\n                  placeholder: \"Name\",\n                  label: \"Name\"\n                }, {\n                  containerClass: \"log\",\n                  type: \"Email\",\n                  inputClass: \"inp\",\n                  id: \"id\",\n                  name: \"name\",\n                  placeholder: \"Email\",\n                  label: \"Email\"\n                }, {\n                  containerClass: \"log\",\n                  type: \"Password\",\n                  inputClass: \"inp\",\n                  id: \"id\",\n                  name: \"name\",\n                  placeholder: \"Password\",\n                  label: \"Password\"\n                }],\n              }}\n            />\n\n\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/placeholder.74c24282.gif\";"],"sourceRoot":""}