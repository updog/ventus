{"version":3,"sources":["components/UsernameForm.js","components/MessageList.js","components/SendMessageForm.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["UsernameForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","onSubmit","bind","assertThisInitialized","onChange","e","preventDefault","setState","target","value","react_default","a","createElement","type","placeholder","Component","MessagesList","styles","container","overflowY","flex","ul","listStyle","li","marginTop","marginBottom","senderUsername","fontWeight","message","fontSize","style","objectSpread","messages","map","index","key","senderId","text","SendMessageForm","padding","borderTop","form","display","input","color","background","outline","border","ChatScreen","currentUser","currentRoom","sendMessage","roomId","id","_this2","Chatkit","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","messageLimit","hooks","onMessage","toConsumableArray","concat","catch","error","console","height","flexDirection","chatContainer","whosOnlineListContainer","width","backgroundColor","chatListContainer","MessageList","chatList","components_SendMessageForm","App","currentScreen","onUsernameSubmitted","fetch","method","headers","Content-Type","body","JSON","stringify","response","components_UsernameForm","src_ChatScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0b98f9a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass UsernameForm extends Component {\n constructor(props) {\n   super(props)\n   this.state = {\n     username: '',\n   }\n   this.onSubmit = this.onSubmit.bind(this)\n   this.onChange = this.onChange.bind(this)\n }\n\n onSubmit(e) {\n   e.preventDefault()\n   this.props.onSubmit(this.state.username)\n }\n\n onChange(e) {\n    this.setState({ username: e.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h2>What is your username?</h2>\n          <form onSubmit={this.onSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Your full name\"\n              onChange={this.onChange}\n            />\n            <input type=\"submit\" />\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\n export default UsernameForm\n","import React, { Component } from 'react'\n\nclass MessagesList extends Component {\n  render() {\n    const styles = {\n      container: {\n        overflowY: 'scroll',\n        flex: 1,\n      },\n      ul: {\n        listStyle: 'none',\n      },\n      li: {\n        marginTop: 13,\n        marginBottom: 13,\n      },\n      senderUsername: {\n        fontWeight: 'bold',\n      },\n      message: { fontSize: 15 },\n    }\n    return (\n      <div\n        style={{\n          ...this.props.style,\n          ...styles.container,\n        }}\n      >\n        <ul style={styles.ul}>\n          {this.props.messages.map((message, index) => (\n            <li key={index} style={styles.li}>\n              <div>\n                <span style={styles.senderUsername}>{message.senderId}</span>{' '}\n              </div>\n              <p style={styles.message}>{message.text}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default MessagesList\n"," import React, { Component } from 'react'\n\n class SendMessageForm extends Component {\n   constructor(props) {\n     super(props)\n     this.state = {\n       text: '',\n     }\n     this.onSubmit = this.onSubmit.bind(this)\n     this.onChange = this.onChange.bind(this)\n   }\n\n   onSubmit(e) {\n     e.preventDefault()\n     this.props.onSubmit(this.state.text)\n     this.setState({ text: '' })\n   }\n\n   onChange(e) {\n     this.setState({ text: e.target.value })\n     if (this.props.onChange) {\n       this.props.onChange()\n     }\n   }\n\n   render() {\n     const styles = {\n       container: {\n         padding: 20,\n         borderTop: '1px #4C758F solid',\n         marginBottom: 20,\n       },\n       form: {\n         display: 'flex',\n       },\n       input: {\n         color: 'inherit',\n         background: 'none',\n         outline: 'none',\n         border: 'none',\n         flex: 1,\n         fontSize: 16,\n       },\n     }\n     return (\n       <div style={styles.container}>\n         <div>\n           <form onSubmit={this.onSubmit} style={styles.form}>\n             <input\n               type=\"text\"\n               placeholder=\"Type a message here then hit ENTER\"\n               onChange={this.onChange}\n               value={this.state.text}\n               style={styles.input}\n             />\n           </form>\n         </div>\n       </div>\n     )\n   }\n }\n\n export default SendMessageForm\n","import React, { Component } from 'react'\nimport Chatkit from '@pusher/chatkit-client'\nimport MessageList from './components/MessageList'\nimport SendMessageForm from './components/SendMessageForm'\n\nclass ChatScreen extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentUser: {},\n      currentRoom: {},\n      messages: []\n    }\n    this.sendMessage = this.sendMessage.bind(this)\n  }\n\n\n  sendMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id,\n    })\n  }\n\n  componentDidMount () {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: 'v1:us1:89256283-171b-49d7-b335-bf1b7301cd54',\n      userId: this.props.currentUsername,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: 'http://localhost:3001/authenticate',\n      }),\n    })\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.setState({ currentUser })\n        return currentUser.subscribeToRoom({\n          roomId: \"19374202\",\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message],\n              })\n            },\n          },\n        })\n      })\n      .then(currentRoom => {\n        this.setState({ currentRoom })\n       })\n     .catch(error => console.error('error', error))\n  }\n\n  render() {\n    const styles = {\n      container: {\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      chatContainer: {\n        display: 'flex',\n        flex: 1,\n      },\n      whosOnlineListContainer: {\n        width: '300px',\n        flex: 'none',\n        padding: 20,\n        backgroundColor: '#2c303b',\n        color: 'white',\n      },\n      chatListContainer: {\n        padding: 20,\n        width: '85%',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n   }\n\n    return (\n      <div style={styles.container}>\n        <div style={styles.chatContainer}>\n          <aside style={styles.whosOnlineListContainer}>\n            <h2>Who's online PLACEHOLDER</h2>\n          </aside>\n          <section style={styles.chatListContainer}>\n            <MessageList\n                messages={this.state.messages}\n                style={styles.chatList}\n            />\n            <SendMessageForm onSubmit={this.sendMessage} />\n          </section>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ChatScreen\n","import React, { Component } from 'react';\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport UsernameForm from './components/UsernameForm'\nimport ChatScreen from './ChatScreen'\n// import ReactModalLogin from 'react-modal-login';\n// import placeholder from './placeholder.gif';\n// import './App.css';\n// import 'typeface-varela-round';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      currentUsername: '',\n      currentScreen: 'WhatIsYourUsernameScreen'\n    }\n    this.onUsernameSubmitted = this.onUsernameSubmitted.bind(this)\n  }\n\n  onUsernameSubmitted(username) {\n    fetch('http://localhost:3001/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username }),\n    })\n      .then(response => {\n        this.setState({\n          currentUsername: username,\n          currentScreen: 'ChatScreen'\n        })\n      })\n      .catch(error => console.error('error', error))\n  }\n\n  render() {\n    if (this.state.currentScreen === 'WhatIsYourUsernameScreen') {\n      return <UsernameForm onSubmit={this.onUsernameSubmitted} />\n    }\n    if (this.state.currentScreen === 'ChatScreen') {\n      return <ChatScreen currentUsername={this.state.currentUsername} />\n    }\n    // return (\n    //   <Router>\n    //     <div>\n    //       <h1>Ventus</h1>\n    //           <Link to=\"/splash\"><button>splash</button></Link>\n    //           <Link to=\"/chat\"><button>demo</button></Link>\n    //           <Route path=\"/splash\" component={Splash} />\n    //           <Route path=\"/chat\" component={Chat} />\n    //     </div>\n    //   </Router>\n    // );\n  }\n}\n\n// class Splash extends Component {\n//   render() {\n//     return (\n//       <div className=\"splash\">\n//         <h2>A simple and effective chat application designed for university students.</h2>\n//         <div className=\"login\">\n//           <h2>Username:</h2>\n//           <input/>\n//           <h2>Password:</h2>\n//           <input/>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n//\n// class Chat extends Component {\n//   render() {\n//     return (\n//       <div className=\"chat\">\n//         <h1>chat</h1>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}